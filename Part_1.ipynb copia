{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "014ddf26",
   "metadata": {},
   "source": [
    "# Homework 4 - Getting to know your customers\n",
    "\n",
    "## 1. Finding Similar Costumers\n",
    "\n",
    "Companies nowadays are implementing product suggestions to provide users with things they are likely to buy. The process often starts by finding similar behaviours among consumers; for this task, we will focus on this part in the specific.\n",
    "Here you will implement an algorithm to find the most similar match to a consumer given his bank account information. In particular, you will implement your version of the LSH algorithm that takes as input information about a consumer and finds people similar to the one in the study."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d42411ea",
   "metadata": {},
   "source": [
    "## 1.1 Set up the data\n",
    "\n",
    "For the sake of this first part, not all columns are necessary since comparing each field single handedly can be quite time-expensive. Then, carefully read the linked guide above and try to understand which features will be appropriate for this task (An heads up: some users have more than one transaction record, make sure to handle them all). Once you have finished, project a version of the dataset to work with.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c78859d6",
   "metadata": {},
   "source": [
    "First of all we use pandas to import the dataset of transaction of a bank in India. The features that could be useful to match similar consumer given the bank accont information are: CustomerID, CustomerDOB (to group by similar ages), CustGender, CustAccountBalance (to group by richness) and TransactionAmount (to group by how much money they use). We are not interested in location (all are in India) and the time of the transaction, but we'll keep transaction date to calculate the age of the person at the year in which the data are taken."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "75292d05",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import Counter\n",
    "import seaborn as sns\n",
    "from tqdm import tqdm as tq\n",
    "from statistics import mean\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "10b7e6d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('/Users/giacomo/Desktop/locale/bank_transactions.csv', usecols = ['TransactionID', 'CustomerID', 'CustomerDOB','CustLocation', 'CustGender', 'TransactionDate', 'CustAccountBalance', 'TransactionAmount (INR)'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "ec8c2a96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TransactionID</th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>CustomerDOB</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustLocation</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>TransactionDate</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T1</td>\n",
       "      <td>C5841053</td>\n",
       "      <td>10/1/94</td>\n",
       "      <td>F</td>\n",
       "      <td>JAMSHEDPUR</td>\n",
       "      <td>17819.05</td>\n",
       "      <td>2/8/16</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>T2</td>\n",
       "      <td>C2142763</td>\n",
       "      <td>4/4/57</td>\n",
       "      <td>M</td>\n",
       "      <td>JHAJJAR</td>\n",
       "      <td>2270.69</td>\n",
       "      <td>2/8/16</td>\n",
       "      <td>27999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>T3</td>\n",
       "      <td>C4417068</td>\n",
       "      <td>26/11/96</td>\n",
       "      <td>F</td>\n",
       "      <td>MUMBAI</td>\n",
       "      <td>17874.44</td>\n",
       "      <td>2/8/16</td>\n",
       "      <td>459.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T4</td>\n",
       "      <td>C5342380</td>\n",
       "      <td>14/9/73</td>\n",
       "      <td>F</td>\n",
       "      <td>MUMBAI</td>\n",
       "      <td>866503.21</td>\n",
       "      <td>2/8/16</td>\n",
       "      <td>2060.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>T5</td>\n",
       "      <td>C9031234</td>\n",
       "      <td>24/3/88</td>\n",
       "      <td>F</td>\n",
       "      <td>NAVI MUMBAI</td>\n",
       "      <td>6714.43</td>\n",
       "      <td>2/8/16</td>\n",
       "      <td>1762.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048562</th>\n",
       "      <td>T1048563</td>\n",
       "      <td>C8020229</td>\n",
       "      <td>8/4/90</td>\n",
       "      <td>M</td>\n",
       "      <td>NEW DELHI</td>\n",
       "      <td>7635.19</td>\n",
       "      <td>18/9/16</td>\n",
       "      <td>799.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048563</th>\n",
       "      <td>T1048564</td>\n",
       "      <td>C6459278</td>\n",
       "      <td>20/2/92</td>\n",
       "      <td>M</td>\n",
       "      <td>NASHIK</td>\n",
       "      <td>27311.42</td>\n",
       "      <td>18/9/16</td>\n",
       "      <td>460.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048564</th>\n",
       "      <td>T1048565</td>\n",
       "      <td>C6412354</td>\n",
       "      <td>18/5/89</td>\n",
       "      <td>M</td>\n",
       "      <td>HYDERABAD</td>\n",
       "      <td>221757.06</td>\n",
       "      <td>18/9/16</td>\n",
       "      <td>770.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048565</th>\n",
       "      <td>T1048566</td>\n",
       "      <td>C6420483</td>\n",
       "      <td>30/8/78</td>\n",
       "      <td>M</td>\n",
       "      <td>VISAKHAPATNAM</td>\n",
       "      <td>10117.87</td>\n",
       "      <td>18/9/16</td>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048566</th>\n",
       "      <td>T1048567</td>\n",
       "      <td>C8337524</td>\n",
       "      <td>5/3/84</td>\n",
       "      <td>M</td>\n",
       "      <td>PUNE</td>\n",
       "      <td>75734.42</td>\n",
       "      <td>18/9/16</td>\n",
       "      <td>1166.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1048567 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        TransactionID CustomerID CustomerDOB CustGender   CustLocation  \\\n",
       "0                  T1   C5841053     10/1/94          F     JAMSHEDPUR   \n",
       "1                  T2   C2142763      4/4/57          M        JHAJJAR   \n",
       "2                  T3   C4417068    26/11/96          F         MUMBAI   \n",
       "3                  T4   C5342380     14/9/73          F         MUMBAI   \n",
       "4                  T5   C9031234     24/3/88          F    NAVI MUMBAI   \n",
       "...               ...        ...         ...        ...            ...   \n",
       "1048562      T1048563   C8020229      8/4/90          M      NEW DELHI   \n",
       "1048563      T1048564   C6459278     20/2/92          M         NASHIK   \n",
       "1048564      T1048565   C6412354     18/5/89          M      HYDERABAD   \n",
       "1048565      T1048566   C6420483     30/8/78          M  VISAKHAPATNAM   \n",
       "1048566      T1048567   C8337524      5/3/84          M           PUNE   \n",
       "\n",
       "         CustAccountBalance TransactionDate  TransactionAmount (INR)  \n",
       "0                  17819.05          2/8/16                     25.0  \n",
       "1                   2270.69          2/8/16                  27999.0  \n",
       "2                  17874.44          2/8/16                    459.0  \n",
       "3                 866503.21          2/8/16                   2060.0  \n",
       "4                   6714.43          2/8/16                   1762.5  \n",
       "...                     ...             ...                      ...  \n",
       "1048562             7635.19         18/9/16                    799.0  \n",
       "1048563            27311.42         18/9/16                    460.0  \n",
       "1048564           221757.06         18/9/16                    770.0  \n",
       "1048565            10117.87         18/9/16                   1000.0  \n",
       "1048566            75734.42         18/9/16                   1166.0  \n",
       "\n",
       "[1048567 rows x 8 columns]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d21e025e",
   "metadata": {},
   "source": [
    "The dataset is composed by 1048567 transactions and 7 features referred to: TransactionID, CustomerID\tCustomerDOB, CustGender, CustAccountBalance, TransactionDate, TransactionAmount (INR). Let's have a look into the missing values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "492d22ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TransactionID                 0\n",
       "CustomerID                    0\n",
       "CustomerDOB                3397\n",
       "CustGender                 1100\n",
       "CustLocation                151\n",
       "CustAccountBalance         2369\n",
       "TransactionDate               0\n",
       "TransactionAmount (INR)       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d8bacb4",
   "metadata": {},
   "source": [
    "Given that the dataset is composed by 1048567 rows the missing values are a small percentage, so we decide to drop them: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "fd105344",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "d2b95dbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1041614 entries, 0 to 1048566\n",
      "Data columns (total 8 columns):\n",
      " #   Column                   Non-Null Count    Dtype  \n",
      "---  ------                   --------------    -----  \n",
      " 0   TransactionID            1041614 non-null  object \n",
      " 1   CustomerID               1041614 non-null  object \n",
      " 2   CustomerDOB              1041614 non-null  object \n",
      " 3   CustGender               1041614 non-null  object \n",
      " 4   CustLocation             1041614 non-null  object \n",
      " 5   CustAccountBalance       1041614 non-null  float64\n",
      " 6   TransactionDate          1041614 non-null  object \n",
      " 7   TransactionAmount (INR)  1041614 non-null  float64\n",
      "dtypes: float64(2), object(6)\n",
      "memory usage: 71.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c14c12ec",
   "metadata": {},
   "source": [
    "# 1.1.1 Age"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24c2ff85",
   "metadata": {},
   "source": [
    "Now we decide to convert into datetime the date of birthday of the customers and the date of the transaction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "8a10bb48",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CustomerDOB'] = pd.to_datetime(df['CustomerDOB'])\n",
    "\n",
    "df['TransactionDate'] = pd.to_datetime(df['TransactionDate']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "6c7184f3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TransactionID</th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>CustomerDOB</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustLocation</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>TransactionDate</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T1</td>\n",
       "      <td>C5841053</td>\n",
       "      <td>1994-10-01</td>\n",
       "      <td>F</td>\n",
       "      <td>JAMSHEDPUR</td>\n",
       "      <td>17819.05</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  TransactionID CustomerID CustomerDOB CustGender CustLocation  \\\n",
       "0            T1   C5841053  1994-10-01          F   JAMSHEDPUR   \n",
       "\n",
       "   CustAccountBalance TransactionDate  TransactionAmount (INR)  \n",
       "0            17819.05      2016-02-08                     25.0  "
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "bf27009b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2016    1041614\n",
       "Name: TransactionDate, dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['TransactionDate'].dt.year.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "e220f726",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8     427316\n",
       "9     157924\n",
       "10     50729\n",
       "7      48083\n",
       "11     47029\n",
       "4      46955\n",
       "3      46738\n",
       "6      45926\n",
       "2      43505\n",
       "12     42888\n",
       "1      42456\n",
       "5      42065\n",
       "Name: TransactionDate, dtype: int64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['TransactionDate'].dt.month.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e236bee",
   "metadata": {},
   "source": [
    "All the data were taken in 2016, so we'll use this year to calculate the ages."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d4d18cd",
   "metadata": {},
   "source": [
    "Going through the Date of Birthday we can see that there is something strange: there are dates of birthday referred to 1800, probably cause it is a default value when this data is missing, and a right tail that seems to be a part of the right graph with an offset: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "6c936874",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count = Counter(df['CustomerDOB'].dt.year)\n",
    "\n",
    "plt.bar(count.keys(), count.values(), label = 'number of people born in the same year')\n",
    "\n",
    "plt.legend()\n",
    " \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7450cbe7",
   "metadata": {},
   "source": [
    "We decide to drop data related to years 1800 and rearrange the data after year 2000: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "2738d85b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.loc[df.CustomerDOB.dt.year > 2000, 'CustomerDOB'] = df.loc[df.CustomerDOB.dt.year > 2000, 'CustomerDOB'] - pd.DateOffset(years = 100)\n",
    "\n",
    "df.drop(df[df.CustomerDOB.dt.year == 1800].index, axis=0, inplace=True)\n",
    "\n",
    "count = Counter(df['CustomerDOB'].dt.year)\n",
    "\n",
    "plt.bar(count.keys(), count.values(), label = 'number of people born in the same year')\n",
    "\n",
    "plt.legend()\n",
    " \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f190d333",
   "metadata": {},
   "source": [
    "Now we can create a 'CustomerAge' column: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "185ca199",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CustomerAge'] = (df['TransactionDate'].dt.year - df['CustomerDOB'].dt.year).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "01a9530f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count = Counter(df['CustomerAge'])\n",
    "\n",
    "plt.bar(count.keys(), count.values(), label = 'number of people with same age')\n",
    "\n",
    "plt.legend()\n",
    " \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b32f38ea",
   "metadata": {},
   "source": [
    "Exploring the ages at the edges we can see that: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "6609f942",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['CustomerAge'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "ead74ec1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "115"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['CustomerAge'].max()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "850d1caa",
   "metadata": {},
   "source": [
    "Considering that the oldest person ever in India was Lucy d'Abreu who lived 113 years and 197 days (ref: Wikipedia) it seems a good choice to drop all the ages over 100 years."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "a2b465bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(df[df.CustomerAge > 100].index, axis=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "d6faa6d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count = Counter(df['CustomerAge'])\n",
    "\n",
    "plt.bar(count.keys(), count.values(), label = 'number of people with same age')\n",
    "\n",
    "plt.legend()\n",
    " \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "8e3db1df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <td>984702.0</td>\n",
       "      <td>106098.849498</td>\n",
       "      <td>818156.044096</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4584.1</td>\n",
       "      <td>16010.04</td>\n",
       "      <td>53766.58</td>\n",
       "      <td>1.150355e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "      <td>984702.0</td>\n",
       "      <td>1452.026805</td>\n",
       "      <td>6140.609584</td>\n",
       "      <td>0.0</td>\n",
       "      <td>151.0</td>\n",
       "      <td>431.00</td>\n",
       "      <td>1125.00</td>\n",
       "      <td>1.560035e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CustomerAge</th>\n",
       "      <td>984702.0</td>\n",
       "      <td>31.042339</td>\n",
       "      <td>8.745263</td>\n",
       "      <td>16.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>29.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>1.000000e+02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            count           mean            std   min     25%  \\\n",
       "CustAccountBalance       984702.0  106098.849498  818156.044096   0.0  4584.1   \n",
       "TransactionAmount (INR)  984702.0    1452.026805    6140.609584   0.0   151.0   \n",
       "CustomerAge              984702.0      31.042339       8.745263  16.0    25.0   \n",
       "\n",
       "                              50%       75%           max  \n",
       "CustAccountBalance       16010.04  53766.58  1.150355e+08  \n",
       "TransactionAmount (INR)    431.00   1125.00  1.560035e+06  \n",
       "CustomerAge                 29.00     34.00  1.000000e+02  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67217cda",
   "metadata": {},
   "source": [
    "In order to implement a Minhash function we decide to divide the CustomAge data in class of ages. Similar ages should led to similar interest. For this reason, looking at the distribution of ages and using our intuition, it seems to be a good choice to divide in: \n",
    "\n",
    " - Age_1 --> 16 $\\leq$ Age $\\leq$ 25\n",
    " \n",
    " - Age_2 --> 26 $\\leq$ Age $\\leq$ 35\n",
    " \n",
    " - Age_3 --> 36 $\\leq$ Age $\\leq$ 45\n",
    " \n",
    " - Age_4 --> 46 $\\leq$ Age $\\leq$ 65\n",
    " \n",
    " - Age_5 --> 66 $\\leq$ Age $\\leq$ 100\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "7117be39",
   "metadata": {},
   "outputs": [],
   "source": [
    "def class_age(age): \n",
    "    \n",
    "    if age <= 25:\n",
    "        \n",
    "        age_class = 1\n",
    "    \n",
    "    elif age >= 25 and age <= 35: \n",
    "        \n",
    "        age_class = 2\n",
    "        \n",
    "    elif age >= 36 and age <= 45: \n",
    "        \n",
    "        age_class = 3\n",
    "        \n",
    "    elif age >= 46 and age <= 65: \n",
    "        \n",
    "        age_class = 4\n",
    "        \n",
    "    elif age >= 66 and age <= 80: \n",
    "        \n",
    "        age_class = 5\n",
    "        \n",
    "    elif age >= 81 and age <= 100:\n",
    "        \n",
    "        age_class = 6\n",
    "        \n",
    "    return age_class      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "36c20a89",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CustomerClassAge'] = df.CustomerAge.apply(lambda x: class_age(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "382949ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TransactionID</th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>CustomerDOB</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustLocation</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>TransactionDate</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "      <th>CustomerAge</th>\n",
       "      <th>CustomerClassAge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T1</td>\n",
       "      <td>C5841053</td>\n",
       "      <td>1994-10-01</td>\n",
       "      <td>F</td>\n",
       "      <td>JAMSHEDPUR</td>\n",
       "      <td>17819.05</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>25.0</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  TransactionID CustomerID CustomerDOB CustGender CustLocation  \\\n",
       "0            T1   C5841053  1994-10-01          F   JAMSHEDPUR   \n",
       "\n",
       "   CustAccountBalance TransactionDate  TransactionAmount (INR)  CustomerAge  \\\n",
       "0            17819.05      2016-02-08                     25.0           22   \n",
       "\n",
       "   CustomerClassAge  \n",
       "0                 1  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29ec37af",
   "metadata": {},
   "source": [
    "# 1.1.2 Define a new ID"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc8796d8",
   "metadata": {},
   "source": [
    "This process will be divided in 2 steps: \n",
    "\n",
    "    - Check if different people are labelled with the same CustomerID\n",
    "    - Check if the same people are labelled with different CustomerID"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1d52af5",
   "metadata": {},
   "source": [
    "### Different people with the same CustomerID"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "6607d3ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TransactionID</th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>CustomerDOB</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustLocation</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>TransactionDate</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "      <th>CustomerAge</th>\n",
       "      <th>CustomerClassAge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>173508</th>\n",
       "      <td>T173509</td>\n",
       "      <td>C1010011</td>\n",
       "      <td>1983-05-08</td>\n",
       "      <td>M</td>\n",
       "      <td>NEW DELHI</td>\n",
       "      <td>120180.54</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>356.0</td>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33670</th>\n",
       "      <td>T33671</td>\n",
       "      <td>C1010011</td>\n",
       "      <td>1992-08-19</td>\n",
       "      <td>F</td>\n",
       "      <td>NOIDA</td>\n",
       "      <td>32500.73</td>\n",
       "      <td>2016-09-26</td>\n",
       "      <td>4750.0</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251647</th>\n",
       "      <td>T251648</td>\n",
       "      <td>C1010014</td>\n",
       "      <td>1984-08-19</td>\n",
       "      <td>M</td>\n",
       "      <td>MUMBAI</td>\n",
       "      <td>161848.76</td>\n",
       "      <td>2016-07-08</td>\n",
       "      <td>250.0</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89543</th>\n",
       "      <td>T89544</td>\n",
       "      <td>C1010014</td>\n",
       "      <td>1992-04-06</td>\n",
       "      <td>F</td>\n",
       "      <td>MUMBAI</td>\n",
       "      <td>38377.14</td>\n",
       "      <td>2016-01-08</td>\n",
       "      <td>1205.0</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50880</th>\n",
       "      <td>T50881</td>\n",
       "      <td>C1010031</td>\n",
       "      <td>1984-07-21</td>\n",
       "      <td>M</td>\n",
       "      <td>VAPI</td>\n",
       "      <td>1754.10</td>\n",
       "      <td>2016-03-08</td>\n",
       "      <td>404.0</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169854</th>\n",
       "      <td>T169855</td>\n",
       "      <td>C1010031</td>\n",
       "      <td>1988-09-06</td>\n",
       "      <td>M</td>\n",
       "      <td>TRICHY</td>\n",
       "      <td>8646.21</td>\n",
       "      <td>2016-04-08</td>\n",
       "      <td>1460.0</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>560675</th>\n",
       "      <td>T560676</td>\n",
       "      <td>C1010035</td>\n",
       "      <td>1980-09-06</td>\n",
       "      <td>M</td>\n",
       "      <td>NAVI MUMBAI</td>\n",
       "      <td>378013.09</td>\n",
       "      <td>2016-08-27</td>\n",
       "      <td>700.0</td>\n",
       "      <td>36</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87413</th>\n",
       "      <td>T87414</td>\n",
       "      <td>C1010035</td>\n",
       "      <td>1992-02-03</td>\n",
       "      <td>M</td>\n",
       "      <td>MUMBAI</td>\n",
       "      <td>7284.42</td>\n",
       "      <td>2016-01-08</td>\n",
       "      <td>50.0</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888199</th>\n",
       "      <td>T888200</td>\n",
       "      <td>C1010041</td>\n",
       "      <td>1992-07-13</td>\n",
       "      <td>F</td>\n",
       "      <td>LOHIT</td>\n",
       "      <td>1290.76</td>\n",
       "      <td>2016-07-09</td>\n",
       "      <td>20.0</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113532</th>\n",
       "      <td>T113533</td>\n",
       "      <td>C1010041</td>\n",
       "      <td>1975-09-14</td>\n",
       "      <td>F</td>\n",
       "      <td>NOIDA</td>\n",
       "      <td>746731.94</td>\n",
       "      <td>2016-06-08</td>\n",
       "      <td>2397.0</td>\n",
       "      <td>41</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       TransactionID CustomerID CustomerDOB CustGender CustLocation  \\\n",
       "173508       T173509   C1010011  1983-05-08          M    NEW DELHI   \n",
       "33670         T33671   C1010011  1992-08-19          F        NOIDA   \n",
       "251647       T251648   C1010014  1984-08-19          M       MUMBAI   \n",
       "89543         T89544   C1010014  1992-04-06          F       MUMBAI   \n",
       "50880         T50881   C1010031  1984-07-21          M         VAPI   \n",
       "169854       T169855   C1010031  1988-09-06          M       TRICHY   \n",
       "560675       T560676   C1010035  1980-09-06          M  NAVI MUMBAI   \n",
       "87413         T87414   C1010035  1992-02-03          M       MUMBAI   \n",
       "888199       T888200   C1010041  1992-07-13          F        LOHIT   \n",
       "113532       T113533   C1010041  1975-09-14          F        NOIDA   \n",
       "\n",
       "        CustAccountBalance TransactionDate  TransactionAmount (INR)  \\\n",
       "173508           120180.54      2016-09-08                    356.0   \n",
       "33670             32500.73      2016-09-26                   4750.0   \n",
       "251647           161848.76      2016-07-08                    250.0   \n",
       "89543             38377.14      2016-01-08                   1205.0   \n",
       "50880              1754.10      2016-03-08                    404.0   \n",
       "169854             8646.21      2016-04-08                   1460.0   \n",
       "560675           378013.09      2016-08-27                    700.0   \n",
       "87413              7284.42      2016-01-08                     50.0   \n",
       "888199             1290.76      2016-07-09                     20.0   \n",
       "113532           746731.94      2016-06-08                   2397.0   \n",
       "\n",
       "        CustomerAge  CustomerClassAge  \n",
       "173508           33                 2  \n",
       "33670            24                 1  \n",
       "251647           32                 2  \n",
       "89543            24                 1  \n",
       "50880            32                 2  \n",
       "169854           28                 2  \n",
       "560675           36                 3  \n",
       "87413            24                 1  \n",
       "888199           24                 1  \n",
       "113532           41                 3  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = df.groupby('CustomerID').TransactionID.count()  #series with number of transaction per CustomerID\n",
    "\n",
    "df[df.CustomerID.isin(a[a>1].index)].sort_values(by=\"CustomerID\").head(10) #take customers with more than 1 transaction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ca806a0",
   "metadata": {},
   "source": [
    "We can see that transaction addressed to the same CustomerID are instead related to different people but labeled with the same username. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d1747fe",
   "metadata": {},
   "source": [
    "So we can create a new 'Identity' linking CustomerID and ages and store these values as integers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "52bcd134",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Identity'] = (df['CustomerID'].map(str) + df['CustomerAge'].map(str)).apply(lambda x: x.replace('C', '')).map(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e3b0e29",
   "metadata": {},
   "source": [
    "Now we can drop the column that we don't need: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "0ad73353",
   "metadata": {},
   "outputs": [],
   "source": [
    "del df['CustomerID'], df['CustomerAge']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "92c65b7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TransactionID</th>\n",
       "      <th>CustomerDOB</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustLocation</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>TransactionDate</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "      <th>CustomerClassAge</th>\n",
       "      <th>Identity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T1</td>\n",
       "      <td>1994-10-01</td>\n",
       "      <td>F</td>\n",
       "      <td>JAMSHEDPUR</td>\n",
       "      <td>17819.05</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1</td>\n",
       "      <td>584105322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>T2</td>\n",
       "      <td>1957-04-04</td>\n",
       "      <td>M</td>\n",
       "      <td>JHAJJAR</td>\n",
       "      <td>2270.69</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>27999.0</td>\n",
       "      <td>4</td>\n",
       "      <td>214276359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>T3</td>\n",
       "      <td>1996-11-26</td>\n",
       "      <td>F</td>\n",
       "      <td>MUMBAI</td>\n",
       "      <td>17874.44</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>459.0</td>\n",
       "      <td>1</td>\n",
       "      <td>441706820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T4</td>\n",
       "      <td>1973-09-14</td>\n",
       "      <td>F</td>\n",
       "      <td>MUMBAI</td>\n",
       "      <td>866503.21</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>2060.0</td>\n",
       "      <td>3</td>\n",
       "      <td>534238043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>T5</td>\n",
       "      <td>1988-03-24</td>\n",
       "      <td>F</td>\n",
       "      <td>NAVI MUMBAI</td>\n",
       "      <td>6714.43</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>1762.5</td>\n",
       "      <td>2</td>\n",
       "      <td>903123428</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  TransactionID CustomerDOB CustGender CustLocation  CustAccountBalance  \\\n",
       "0            T1  1994-10-01          F   JAMSHEDPUR            17819.05   \n",
       "1            T2  1957-04-04          M      JHAJJAR             2270.69   \n",
       "2            T3  1996-11-26          F       MUMBAI            17874.44   \n",
       "3            T4  1973-09-14          F       MUMBAI           866503.21   \n",
       "4            T5  1988-03-24          F  NAVI MUMBAI             6714.43   \n",
       "\n",
       "  TransactionDate  TransactionAmount (INR)  CustomerClassAge   Identity  \n",
       "0      2016-02-08                     25.0                 1  584105322  \n",
       "1      2016-02-08                  27999.0                 4  214276359  \n",
       "2      2016-02-08                    459.0                 1  441706820  \n",
       "3      2016-02-08                   2060.0                 3  534238043  \n",
       "4      2016-02-08                   1762.5                 2  903123428  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "e0657199",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df['CustomerDOB'] = df['CustomerDOB'].apply(lambda x: x.strftime('%Y-%m-%d')) non necessario"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e4880a2",
   "metadata": {},
   "source": [
    "### Same people with different Identity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42bd2a73",
   "metadata": {},
   "source": [
    "Now we can check for same people who are labelled with different Identity: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "a58d5855",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerDOB</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustLocation</th>\n",
       "      <th>Identity</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1916-02-22</td>\n",
       "      <td>16205.90</td>\n",
       "      <td>M</td>\n",
       "      <td>SURAT</td>\n",
       "      <td>2846955100</td>\n",
       "      <td>460.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1916-02-22</td>\n",
       "      <td>16205.90</td>\n",
       "      <td>M</td>\n",
       "      <td>SURAT</td>\n",
       "      <td>6946973100</td>\n",
       "      <td>294.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1918-03-05</td>\n",
       "      <td>11725.34</td>\n",
       "      <td>F</td>\n",
       "      <td>MUMBAI</td>\n",
       "      <td>263882598</td>\n",
       "      <td>250.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1919-12-15</td>\n",
       "      <td>27081.15</td>\n",
       "      <td>F</td>\n",
       "      <td>DELHI</td>\n",
       "      <td>492554497</td>\n",
       "      <td>12580.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1919-12-15</td>\n",
       "      <td>27081.15</td>\n",
       "      <td>F</td>\n",
       "      <td>DELHI</td>\n",
       "      <td>762555297</td>\n",
       "      <td>500.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  CustomerDOB  CustAccountBalance CustGender CustLocation    Identity  \\\n",
       "0  1916-02-22            16205.90          M        SURAT  2846955100   \n",
       "1  1916-02-22            16205.90          M        SURAT  6946973100   \n",
       "2  1918-03-05            11725.34          F       MUMBAI   263882598   \n",
       "3  1919-12-15            27081.15          F        DELHI   492554497   \n",
       "4  1919-12-15            27081.15          F        DELHI   762555297   \n",
       "\n",
       "   TransactionAmount (INR)  \n",
       "0                   460.00  \n",
       "1                   294.00  \n",
       "2                   250.00  \n",
       "3                 12580.29  \n",
       "4                   500.00  "
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "84372371",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerDOB</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustLocation</th>\n",
       "      <th>Identity</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1916-02-22</td>\n",
       "      <td>16205.90</td>\n",
       "      <td>M</td>\n",
       "      <td>SURAT</td>\n",
       "      <td>2846955100</td>\n",
       "      <td>460.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1916-02-22</td>\n",
       "      <td>16205.90</td>\n",
       "      <td>M</td>\n",
       "      <td>SURAT</td>\n",
       "      <td>6946973100</td>\n",
       "      <td>294.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1918-03-05</td>\n",
       "      <td>11725.34</td>\n",
       "      <td>F</td>\n",
       "      <td>MUMBAI</td>\n",
       "      <td>263882598</td>\n",
       "      <td>250.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1919-12-15</td>\n",
       "      <td>27081.15</td>\n",
       "      <td>F</td>\n",
       "      <td>DELHI</td>\n",
       "      <td>492554497</td>\n",
       "      <td>12580.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1919-12-15</td>\n",
       "      <td>27081.15</td>\n",
       "      <td>F</td>\n",
       "      <td>DELHI</td>\n",
       "      <td>762555297</td>\n",
       "      <td>500.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1919-12-15</td>\n",
       "      <td>27081.15</td>\n",
       "      <td>F</td>\n",
       "      <td>DELHI</td>\n",
       "      <td>522553497</td>\n",
       "      <td>10.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1919-12-15</td>\n",
       "      <td>27081.15</td>\n",
       "      <td>F</td>\n",
       "      <td>DELHI</td>\n",
       "      <td>102551397</td>\n",
       "      <td>10.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1919-12-15</td>\n",
       "      <td>27081.15</td>\n",
       "      <td>F</td>\n",
       "      <td>DELHI</td>\n",
       "      <td>262559097</td>\n",
       "      <td>1200.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1919-12-15</td>\n",
       "      <td>27081.15</td>\n",
       "      <td>F</td>\n",
       "      <td>DELHI</td>\n",
       "      <td>292557997</td>\n",
       "      <td>10.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1919-12-15</td>\n",
       "      <td>27081.15</td>\n",
       "      <td>F</td>\n",
       "      <td>DELHI</td>\n",
       "      <td>472557497</td>\n",
       "      <td>1000.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1920-01-04</td>\n",
       "      <td>18952.79</td>\n",
       "      <td>M</td>\n",
       "      <td>CHANDIGARH</td>\n",
       "      <td>522442996</td>\n",
       "      <td>9514.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1920-06-03</td>\n",
       "      <td>66905.92</td>\n",
       "      <td>M</td>\n",
       "      <td>DELHI</td>\n",
       "      <td>683978896</td>\n",
       "      <td>1132.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1921-01-19</td>\n",
       "      <td>1125922.25</td>\n",
       "      <td>M</td>\n",
       "      <td>NEW DELHI</td>\n",
       "      <td>441767995</td>\n",
       "      <td>4570.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1921-01-19</td>\n",
       "      <td>1125922.25</td>\n",
       "      <td>M</td>\n",
       "      <td>NEW DELHI</td>\n",
       "      <td>641765695</td>\n",
       "      <td>6300.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1921-01-19</td>\n",
       "      <td>1125922.25</td>\n",
       "      <td>M</td>\n",
       "      <td>NEW DELHI</td>\n",
       "      <td>421763195</td>\n",
       "      <td>2460.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1921-01-19</td>\n",
       "      <td>1125922.25</td>\n",
       "      <td>M</td>\n",
       "      <td>NEW DELHI</td>\n",
       "      <td>451766195</td>\n",
       "      <td>957.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1921-01-19</td>\n",
       "      <td>1125922.25</td>\n",
       "      <td>M</td>\n",
       "      <td>NEW DELHI</td>\n",
       "      <td>701764695</td>\n",
       "      <td>995.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1921-01-19</td>\n",
       "      <td>1125922.25</td>\n",
       "      <td>M</td>\n",
       "      <td>NEW DELHI</td>\n",
       "      <td>171764295</td>\n",
       "      <td>2875.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1921-01-19</td>\n",
       "      <td>1125922.25</td>\n",
       "      <td>M</td>\n",
       "      <td>NEW DELHI</td>\n",
       "      <td>511767995</td>\n",
       "      <td>1102.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1921-01-19</td>\n",
       "      <td>1125922.25</td>\n",
       "      <td>M</td>\n",
       "      <td>NEW DELHI</td>\n",
       "      <td>791765995</td>\n",
       "      <td>5023.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CustomerDOB  CustAccountBalance CustGender CustLocation    Identity  \\\n",
       "0   1916-02-22            16205.90          M        SURAT  2846955100   \n",
       "1   1916-02-22            16205.90          M        SURAT  6946973100   \n",
       "2   1918-03-05            11725.34          F       MUMBAI   263882598   \n",
       "3   1919-12-15            27081.15          F        DELHI   492554497   \n",
       "4   1919-12-15            27081.15          F        DELHI   762555297   \n",
       "5   1919-12-15            27081.15          F        DELHI   522553497   \n",
       "6   1919-12-15            27081.15          F        DELHI   102551397   \n",
       "7   1919-12-15            27081.15          F        DELHI   262559097   \n",
       "8   1919-12-15            27081.15          F        DELHI   292557997   \n",
       "9   1919-12-15            27081.15          F        DELHI   472557497   \n",
       "10  1920-01-04            18952.79          M   CHANDIGARH   522442996   \n",
       "11  1920-06-03            66905.92          M        DELHI   683978896   \n",
       "12  1921-01-19          1125922.25          M    NEW DELHI   441767995   \n",
       "13  1921-01-19          1125922.25          M    NEW DELHI   641765695   \n",
       "14  1921-01-19          1125922.25          M    NEW DELHI   421763195   \n",
       "15  1921-01-19          1125922.25          M    NEW DELHI   451766195   \n",
       "16  1921-01-19          1125922.25          M    NEW DELHI   701764695   \n",
       "17  1921-01-19          1125922.25          M    NEW DELHI   171764295   \n",
       "18  1921-01-19          1125922.25          M    NEW DELHI   511767995   \n",
       "19  1921-01-19          1125922.25          M    NEW DELHI   791765995   \n",
       "\n",
       "    TransactionAmount (INR)  \n",
       "0                    460.00  \n",
       "1                    294.00  \n",
       "2                    250.00  \n",
       "3                  12580.29  \n",
       "4                    500.00  \n",
       "5                     10.00  \n",
       "6                     10.00  \n",
       "7                   1200.00  \n",
       "8                     10.00  \n",
       "9                   1000.00  \n",
       "10                  9514.00  \n",
       "11                  1132.41  \n",
       "12                  4570.00  \n",
       "13                  6300.00  \n",
       "14                  2460.00  \n",
       "15                   957.00  \n",
       "16                   995.00  \n",
       "17                  2875.00  \n",
       "18                  1102.00  \n",
       "19                  5023.00  "
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.sort_values(by = ['CustomerDOB', 'CustAccountBalance', 'CustGender', 'CustLocation'], ascending = True)[['CustomerDOB', 'CustAccountBalance', 'CustGender', 'CustLocation', 'Identity', 'TransactionAmount (INR)']].reset_index(drop = True).head(20)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ebaf05f",
   "metadata": {},
   "source": [
    "We can see that ther are people who are labelled with different identity but have all the other field identical. So we can say that, with high probability, they are the same person. So we can replace those rows with a rows with the TransactionAmount equal to the mean of the TransactionAmount:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "a7c9c7f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df = pd.DataFrame(columns=list(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "7f072f16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.25"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = [3, 4, 2, 4]\n",
    "\n",
    "mean(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "45aed618",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 60%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Š                 | 12/20 [00:00<00:00, 42.55it/s]\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "20",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/range.py:385\u001b[0m, in \u001b[0;36mRangeIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m    384\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 385\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_range\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnew_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    386\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "\u001b[0;31mValueError\u001b[0m: 20 is not in range",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Input \u001b[0;32mIn [163]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m flag \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m flag \u001b[38;5;241m==\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m:\n\u001b[0;32m----> 9\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCustomerDOB\u001b[39m\u001b[38;5;124m'\u001b[39m][index] \u001b[38;5;241m==\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mCustomerDOB\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m[\u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m]\u001b[49m \u001b[38;5;129;01mand\u001b[39;00m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCustAccountBalance\u001b[39m\u001b[38;5;124m'\u001b[39m][index] \u001b[38;5;241m==\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCustAccountBalance\u001b[39m\u001b[38;5;124m'\u001b[39m][index\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m] \u001b[38;5;129;01mand\u001b[39;00m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCustLocation\u001b[39m\u001b[38;5;124m'\u001b[39m][index] \u001b[38;5;241m==\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCustLocation\u001b[39m\u001b[38;5;124m'\u001b[39m][index\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m] \u001b[38;5;129;01mand\u001b[39;00m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCustGender\u001b[39m\u001b[38;5;124m'\u001b[39m][index] \u001b[38;5;241m==\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCustGender\u001b[39m\u001b[38;5;124m'\u001b[39m][index\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m]:\n\u001b[1;32m     11\u001b[0m         transaction_list\u001b[38;5;241m.\u001b[39mappend([df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTransactionAmount (INR)\u001b[39m\u001b[38;5;124m'\u001b[39m][index\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m]])\n\u001b[1;32m     13\u001b[0m         index \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/series.py:958\u001b[0m, in \u001b[0;36mSeries.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    955\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_values[key]\n\u001b[1;32m    957\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m key_is_scalar:\n\u001b[0;32m--> 958\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_value\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    960\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_hashable(key):\n\u001b[1;32m    961\u001b[0m     \u001b[38;5;66;03m# Otherwise index.get_value will raise InvalidIndexError\u001b[39;00m\n\u001b[1;32m    962\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    963\u001b[0m         \u001b[38;5;66;03m# For labels that don't resolve as scalars like tuples and frozensets\u001b[39;00m\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/series.py:1069\u001b[0m, in \u001b[0;36mSeries._get_value\u001b[0;34m(self, label, takeable)\u001b[0m\n\u001b[1;32m   1066\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_values[label]\n\u001b[1;32m   1068\u001b[0m \u001b[38;5;66;03m# Similar to Index.get_value, but we do not fall back to positional\u001b[39;00m\n\u001b[0;32m-> 1069\u001b[0m loc \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1070\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex\u001b[38;5;241m.\u001b[39m_get_values_for_loc(\u001b[38;5;28mself\u001b[39m, loc, label)\n",
      "File \u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/range.py:387\u001b[0m, in \u001b[0;36mRangeIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m    385\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_range\u001b[38;5;241m.\u001b[39mindex(new_key)\n\u001b[1;32m    386\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[0;32m--> 387\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m    388\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n\u001b[1;32m    389\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key)\n",
      "\u001b[0;31mKeyError\u001b[0m: 20"
     ]
    }
   ],
   "source": [
    "for index in tq(range(len(df))):\n",
    "    \n",
    "    transaction_list = [df['TransactionAmount (INR)'][index]]\n",
    "    \n",
    "    flag = False\n",
    "    \n",
    "    while flag == False:\n",
    "        \n",
    "        if df['CustomerDOB'][index] == df['CustomerDOB'][index+1] and df['CustAccountBalance'][index] == df['CustAccountBalance'][index+1] and df['CustLocation'][index] == df['CustLocation'][index+1] and df['CustGender'][index] == df['CustGender'][index+1]:\n",
    "            \n",
    "            transaction_list.append([df['TransactionAmount (INR)'][index+1]])\n",
    "            \n",
    "            index += 1\n",
    "            \n",
    "        else: \n",
    "            \n",
    "            flag = True\n",
    "            \n",
    "    new_df.append({'CustGender': np.mean(transaction_list), 'CustAccountBalance': [df['CustAccountBalance'][index]], 'CustGender': [df['CustGender'][index]], 'Identity': [df['Identity'][index]]}, ignore_index=True)\n",
    "    \n",
    "    index +=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "5cb19ea5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['CustomerDOB',\n",
       " 'CustAccountBalance',\n",
       " 'CustGender',\n",
       " 'CustLocation',\n",
       " 'Identity',\n",
       " 'TransactionAmount (INR)']"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29eab6ba",
   "metadata": {},
   "source": [
    "# 1.1.3 Multiple transaction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59397cc9",
   "metadata": {},
   "source": [
    "Now we can search for multiple transactions referred to each Identity:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "ca0fc360",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TransactionID</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "      <th>CustomerClassAge</th>\n",
       "      <th>Identity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>214918</th>\n",
       "      <td>T214919</td>\n",
       "      <td>M</td>\n",
       "      <td>11787.98</td>\n",
       "      <td>840.00</td>\n",
       "      <td>2</td>\n",
       "      <td>101011729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1027304</th>\n",
       "      <td>T1027305</td>\n",
       "      <td>M</td>\n",
       "      <td>7634.23</td>\n",
       "      <td>275.00</td>\n",
       "      <td>2</td>\n",
       "      <td>101011729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839061</th>\n",
       "      <td>T839062</td>\n",
       "      <td>M</td>\n",
       "      <td>45856.24</td>\n",
       "      <td>712.00</td>\n",
       "      <td>1</td>\n",
       "      <td>101063625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>731718</th>\n",
       "      <td>T731719</td>\n",
       "      <td>M</td>\n",
       "      <td>45856.24</td>\n",
       "      <td>655.00</td>\n",
       "      <td>1</td>\n",
       "      <td>101063625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>353117</th>\n",
       "      <td>T353118</td>\n",
       "      <td>M</td>\n",
       "      <td>25331.36</td>\n",
       "      <td>50.00</td>\n",
       "      <td>4</td>\n",
       "      <td>101098855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150732</th>\n",
       "      <td>T150733</td>\n",
       "      <td>M</td>\n",
       "      <td>5277.54</td>\n",
       "      <td>53.00</td>\n",
       "      <td>2</td>\n",
       "      <td>907577727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>667749</th>\n",
       "      <td>T667750</td>\n",
       "      <td>F</td>\n",
       "      <td>98044.88</td>\n",
       "      <td>300.00</td>\n",
       "      <td>1</td>\n",
       "      <td>908302125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>619072</th>\n",
       "      <td>T619073</td>\n",
       "      <td>F</td>\n",
       "      <td>98044.88</td>\n",
       "      <td>249.39</td>\n",
       "      <td>1</td>\n",
       "      <td>908302125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>843052</th>\n",
       "      <td>T843053</td>\n",
       "      <td>M</td>\n",
       "      <td>104897.67</td>\n",
       "      <td>2250.00</td>\n",
       "      <td>2</td>\n",
       "      <td>908443129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>645838</th>\n",
       "      <td>T645839</td>\n",
       "      <td>M</td>\n",
       "      <td>13037.57</td>\n",
       "      <td>59.00</td>\n",
       "      <td>2</td>\n",
       "      <td>908443129</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>17132 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        TransactionID CustGender  CustAccountBalance  TransactionAmount (INR)  \\\n",
       "214918        T214919          M            11787.98                   840.00   \n",
       "1027304      T1027305          M             7634.23                   275.00   \n",
       "839061        T839062          M            45856.24                   712.00   \n",
       "731718        T731719          M            45856.24                   655.00   \n",
       "353117        T353118          M            25331.36                    50.00   \n",
       "...               ...        ...                 ...                      ...   \n",
       "150732        T150733          M             5277.54                    53.00   \n",
       "667749        T667750          F            98044.88                   300.00   \n",
       "619072        T619073          F            98044.88                   249.39   \n",
       "843052        T843053          M           104897.67                  2250.00   \n",
       "645838        T645839          M            13037.57                    59.00   \n",
       "\n",
       "         CustomerClassAge   Identity  \n",
       "214918                  2  101011729  \n",
       "1027304                 2  101011729  \n",
       "839061                  1  101063625  \n",
       "731718                  1  101063625  \n",
       "353117                  4  101098855  \n",
       "...                   ...        ...  \n",
       "150732                  2  907577727  \n",
       "667749                  1  908302125  \n",
       "619072                  1  908302125  \n",
       "843052                  2  908443129  \n",
       "645838                  2  908443129  \n",
       "\n",
       "[17132 rows x 6 columns]"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = df.groupby('Identity').TransactionID.count()\n",
    "\n",
    "df[df.Identity.isin(a[a > 1].index)].sort_values(by = 'Identity') #take customers with more than 1 transaction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2f01c41",
   "metadata": {},
   "source": [
    "We can see that the maximum number of transaction per person is 3:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "c5a724d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.Identity.isin(a[a > 1].index)].groupby('Identity').TransactionID.count().max()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cac0850",
   "metadata": {},
   "source": [
    "We decided to substitute multiple transactions referred to the same identity with the mean of the values in columns 'Transaction amount (INR)' and 'CustAccountBalance': "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "63cd28ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "863449029"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "id_multitrans = list(set(df[df.Identity.isin(a[a > 1].index)].Identity)) #find identity with multiple transaction\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "34e392a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This function find the mean of Balance and transaction amount of account with the same ID and replace the multiple \n",
    "#transaction referred to a single account with one transaction that summarize data referred to it. \n",
    "\n",
    "def replace_row(data, ID):\n",
    "        \n",
    "    new_inr =  data.loc[data['Identity'] == ID]['TransactionAmount (INR)'].mean()\n",
    "    \n",
    "    new_balance = data.loc[data['Identity'] == ID]['CustAccountBalance'].mean()\n",
    "    \n",
    "    new_row = {'CustGender': dat a.loc[data['Identity'] == ID]['CustGender'].head(1).item(), 'CustAccountBalance': new_balance, 'TransactionAmount (INR)': new_inr, 'CustomerClassAge': data.loc[data['Identity'] == ID]['CustomerClassAge'].head(1).item(), 'Identity': ID}\n",
    "    \n",
    "    data.drop(data[data['Identity'] == ID].index, inplace = True)\n",
    "    \n",
    "    data = data.append(new_row, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e9be571",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f8e00f20ac0>]"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.plot(df['TransactionID'],df['CustAccountBalance'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0c4fcc4",
   "metadata": {},
   "source": [
    "Now we can use this function looping on the identity that have done multiple transaction: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "64983d66",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 5324/5324 [16:55<00:00,  5.24it/s]\n"
     ]
    }
   ],
   "source": [
    "for i in tq(range(len(id_multitrans))):\n",
    "    \n",
    "    replace_row(df, id_multitrans[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6950e876",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [1]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mdf\u001b[49m\u001b[38;5;241m.\u001b[39mto_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/Users/giacomo/Desktop/dataf\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
     ]
    }
   ],
   "source": [
    "df.to_csv('/Users/giacomo/Desktop/dataf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "c7d1012c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TransactionID</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "      <th>CustomerClassAge</th>\n",
       "      <th>Identity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [TransactionID, CustGender, CustAccountBalance, TransactionAmount (INR), CustomerClassAge, Identity]\n",
       "Index: []"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = df.groupby('Identity').TransactionID.count()\n",
    "\n",
    "df[df.Identity.isin(a[a > 1].index)].sort_values(by = 'Identity')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95fd210f",
   "metadata": {},
   "source": [
    "# 1.1.4 Cust Gender"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad2a000e",
   "metadata": {},
   "source": [
    "Now we decide to go throgh the CustGender to rearrange it into 0/1 values: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23526fec",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CustGender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3abfc530",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CustGender'].value_counts().plot(kind='pie',autopct='%.2f')\n",
    "\n",
    "plt.legend()\n",
    " \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59784c35",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CustGender'] = df.CustGender.apply(lambda x: 1 if x == 'M' else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81789085",
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa47674f",
   "metadata": {},
   "source": [
    "# 1.1.5 Balance and TransactionAmount"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed778fc0",
   "metadata": {},
   "source": [
    "Now we can go through the Transaction Amount and CustAccountBalance. First of all we cast them into int:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f35bddc",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['TransactionAmount (INR)'] = df['TransactionAmount (INR)'].astype(int)\n",
    "\n",
    "df['CustAccountBalance'] = df['CustAccountBalance'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef352b9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c07f152",
   "metadata": {},
   "source": [
    "Looking at the distribution of the CustAccountBalance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "773b1182",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(df['CustomerAge'], df['CustAccountBalance'] , c='r', marker = '.', label='4')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4cf1b67",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CustAccountBalance'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a730a1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Identity'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "288c93d4",
   "metadata": {},
   "source": [
    "## 1.2 Fingerprint hashing\n",
    "Using the previously selected data with the features you found pertinent, you have to:\n",
    "\n",
    "1. Implement your minhash function from scratch. No ready-made hash functions are allowed. Read the class material and search the internet if you need to. For reference, it may be practical to look at the description of hash functions in the book.\n",
    "\n",
    "2. Process the dataset and add each record to the MinHash. The subtask's goal is to try and map each consumer to its bin; to ensure this works well, be sure you understand how MinHash works and choose a matching threshold to use. Before moving on, experiment with different thresholds, explaining your choice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "312cc8f4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "357c769c",
   "metadata": {},
   "source": [
    "## 1.3 Locality Sensitive Hashing\n",
    "Now that you prepared your algorithm, it's query time!\n",
    "We have prepared some dummy users for you to work with.\n",
    "\n",
    "Download this csv and report the most similar users (comparing them against the dataset provided in Kaggle).\n",
    "Did your hashing method work properly, what scores have you obtained and how long did it take to run? Provide information and analysis about the results."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
