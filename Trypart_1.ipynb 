{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "014ddf26",
   "metadata": {},
   "source": [
    "# Homework 4 - Getting to know your customers\n",
    "\n",
    "## 1. Finding Similar Costumers\n",
    "\n",
    "Companies nowadays are implementing product suggestions to provide users with things they are likely to buy. The process often starts by finding similar behaviours among consumers; for this task, we will focus on this part in the specific.\n",
    "Here you will implement an algorithm to find the most similar match to a consumer given his bank account information. In particular, you will implement your version of the LSH algorithm that takes as input information about a consumer and finds people similar to the one in the study."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d42411ea",
   "metadata": {},
   "source": [
    "## 1.1 Set up the data\n",
    "\n",
    "For the sake of this first part, not all columns are necessary since comparing each field single handedly can be quite time-expensive. Then, carefully read the linked guide above and try to understand which features will be appropriate for this task (An heads up: some users have more than one transaction record, make sure to handle them all). Once you have finished, project a version of the dataset to work with.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c78859d6",
   "metadata": {},
   "source": [
    "First of all we use pandas to import the dataset of transaction of a bank in India. The features that could be useful to match similar consumer given the bank accont information are: CustomerID, CustomerDOB (to group by similar ages), CustGender, CustAccountBalance (to group by richness) and TransactionAmount (to group by how much money they use). We are not interested in location (all are in India) and the time of the transaction, but we'll keep transaction date to calculate the age of the person at the year in which the data are taken."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "75292d05",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import Counter\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "10b7e6d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('/Users/giacomo/Desktop/locale/bank_transactions.csv', usecols = ['TransactionID', 'CustomerID', 'CustomerDOB', 'CustGender', 'TransactionDate', 'CustAccountBalance', 'TransactionAmount (INR)'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "ebac4ab2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TransactionID</th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>CustomerDOB</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>TransactionDate</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T1</td>\n",
       "      <td>C5841053</td>\n",
       "      <td>10/1/94</td>\n",
       "      <td>F</td>\n",
       "      <td>17819.05</td>\n",
       "      <td>2/8/16</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>T2</td>\n",
       "      <td>C2142763</td>\n",
       "      <td>4/4/57</td>\n",
       "      <td>M</td>\n",
       "      <td>2270.69</td>\n",
       "      <td>2/8/16</td>\n",
       "      <td>27999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>T3</td>\n",
       "      <td>C4417068</td>\n",
       "      <td>26/11/96</td>\n",
       "      <td>F</td>\n",
       "      <td>17874.44</td>\n",
       "      <td>2/8/16</td>\n",
       "      <td>459.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T4</td>\n",
       "      <td>C5342380</td>\n",
       "      <td>14/9/73</td>\n",
       "      <td>F</td>\n",
       "      <td>866503.21</td>\n",
       "      <td>2/8/16</td>\n",
       "      <td>2060.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>T5</td>\n",
       "      <td>C9031234</td>\n",
       "      <td>24/3/88</td>\n",
       "      <td>F</td>\n",
       "      <td>6714.43</td>\n",
       "      <td>2/8/16</td>\n",
       "      <td>1762.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048562</th>\n",
       "      <td>T1048563</td>\n",
       "      <td>C8020229</td>\n",
       "      <td>8/4/90</td>\n",
       "      <td>M</td>\n",
       "      <td>7635.19</td>\n",
       "      <td>18/9/16</td>\n",
       "      <td>799.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048563</th>\n",
       "      <td>T1048564</td>\n",
       "      <td>C6459278</td>\n",
       "      <td>20/2/92</td>\n",
       "      <td>M</td>\n",
       "      <td>27311.42</td>\n",
       "      <td>18/9/16</td>\n",
       "      <td>460.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048564</th>\n",
       "      <td>T1048565</td>\n",
       "      <td>C6412354</td>\n",
       "      <td>18/5/89</td>\n",
       "      <td>M</td>\n",
       "      <td>221757.06</td>\n",
       "      <td>18/9/16</td>\n",
       "      <td>770.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048565</th>\n",
       "      <td>T1048566</td>\n",
       "      <td>C6420483</td>\n",
       "      <td>30/8/78</td>\n",
       "      <td>M</td>\n",
       "      <td>10117.87</td>\n",
       "      <td>18/9/16</td>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048566</th>\n",
       "      <td>T1048567</td>\n",
       "      <td>C8337524</td>\n",
       "      <td>5/3/84</td>\n",
       "      <td>M</td>\n",
       "      <td>75734.42</td>\n",
       "      <td>18/9/16</td>\n",
       "      <td>1166.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1048567 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        TransactionID CustomerID CustomerDOB CustGender  CustAccountBalance  \\\n",
       "0                  T1   C5841053     10/1/94          F            17819.05   \n",
       "1                  T2   C2142763      4/4/57          M             2270.69   \n",
       "2                  T3   C4417068    26/11/96          F            17874.44   \n",
       "3                  T4   C5342380     14/9/73          F           866503.21   \n",
       "4                  T5   C9031234     24/3/88          F             6714.43   \n",
       "...               ...        ...         ...        ...                 ...   \n",
       "1048562      T1048563   C8020229      8/4/90          M             7635.19   \n",
       "1048563      T1048564   C6459278     20/2/92          M            27311.42   \n",
       "1048564      T1048565   C6412354     18/5/89          M           221757.06   \n",
       "1048565      T1048566   C6420483     30/8/78          M            10117.87   \n",
       "1048566      T1048567   C8337524      5/3/84          M            75734.42   \n",
       "\n",
       "        TransactionDate  TransactionAmount (INR)  \n",
       "0                2/8/16                     25.0  \n",
       "1                2/8/16                  27999.0  \n",
       "2                2/8/16                    459.0  \n",
       "3                2/8/16                   2060.0  \n",
       "4                2/8/16                   1762.5  \n",
       "...                 ...                      ...  \n",
       "1048562         18/9/16                    799.0  \n",
       "1048563         18/9/16                    460.0  \n",
       "1048564         18/9/16                    770.0  \n",
       "1048565         18/9/16                   1000.0  \n",
       "1048566         18/9/16                   1166.0  \n",
       "\n",
       "[1048567 rows x 7 columns]"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d21e025e",
   "metadata": {},
   "source": [
    "The dataset is composed by 1048567 transactions and 7 features referred to: TransactionID, CustomerID\tCustomerDOB, CustGender, CustAccountBalance, TransactionDate, TransactionAmount (INR). Let's have a look into the missing values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "492d22ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TransactionID                 0\n",
       "CustomerID                    0\n",
       "CustomerDOB                3397\n",
       "CustGender                 1100\n",
       "CustAccountBalance         2369\n",
       "TransactionDate               0\n",
       "TransactionAmount (INR)       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d8bacb4",
   "metadata": {},
   "source": [
    "Given that the dataset is composed by 1048567 rows the missing values are a small percentage, so we decide to drop them: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "fd105344",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "d2b95dbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1041765 entries, 0 to 1048566\n",
      "Data columns (total 7 columns):\n",
      " #   Column                   Non-Null Count    Dtype  \n",
      "---  ------                   --------------    -----  \n",
      " 0   TransactionID            1041765 non-null  object \n",
      " 1   CustomerID               1041765 non-null  object \n",
      " 2   CustomerDOB              1041765 non-null  object \n",
      " 3   CustGender               1041765 non-null  object \n",
      " 4   CustAccountBalance       1041765 non-null  float64\n",
      " 5   TransactionDate          1041765 non-null  object \n",
      " 6   TransactionAmount (INR)  1041765 non-null  float64\n",
      "dtypes: float64(2), object(5)\n",
      "memory usage: 63.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24c2ff85",
   "metadata": {},
   "source": [
    "Now we decide to convert into datetime the date of birthday of the customers and the date of the transaction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "8a10bb48",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CustomerDOB'] = pd.to_datetime(df['CustomerDOB'])\n",
    "\n",
    "df['TransactionDate'] = pd.to_datetime(df['TransactionDate']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "6c7184f3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TransactionID</th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>CustomerDOB</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>TransactionDate</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T1</td>\n",
       "      <td>C5841053</td>\n",
       "      <td>1994-10-01</td>\n",
       "      <td>F</td>\n",
       "      <td>17819.05</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>T2</td>\n",
       "      <td>C2142763</td>\n",
       "      <td>2057-04-04</td>\n",
       "      <td>M</td>\n",
       "      <td>2270.69</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>27999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>T3</td>\n",
       "      <td>C4417068</td>\n",
       "      <td>1996-11-26</td>\n",
       "      <td>F</td>\n",
       "      <td>17874.44</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>459.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T4</td>\n",
       "      <td>C5342380</td>\n",
       "      <td>1973-09-14</td>\n",
       "      <td>F</td>\n",
       "      <td>866503.21</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>2060.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>T5</td>\n",
       "      <td>C9031234</td>\n",
       "      <td>1988-03-24</td>\n",
       "      <td>F</td>\n",
       "      <td>6714.43</td>\n",
       "      <td>2016-02-08</td>\n",
       "      <td>1762.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048562</th>\n",
       "      <td>T1048563</td>\n",
       "      <td>C8020229</td>\n",
       "      <td>1990-08-04</td>\n",
       "      <td>M</td>\n",
       "      <td>7635.19</td>\n",
       "      <td>2016-09-18</td>\n",
       "      <td>799.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048563</th>\n",
       "      <td>T1048564</td>\n",
       "      <td>C6459278</td>\n",
       "      <td>1992-02-20</td>\n",
       "      <td>M</td>\n",
       "      <td>27311.42</td>\n",
       "      <td>2016-09-18</td>\n",
       "      <td>460.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048564</th>\n",
       "      <td>T1048565</td>\n",
       "      <td>C6412354</td>\n",
       "      <td>1989-05-18</td>\n",
       "      <td>M</td>\n",
       "      <td>221757.06</td>\n",
       "      <td>2016-09-18</td>\n",
       "      <td>770.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048565</th>\n",
       "      <td>T1048566</td>\n",
       "      <td>C6420483</td>\n",
       "      <td>1978-08-30</td>\n",
       "      <td>M</td>\n",
       "      <td>10117.87</td>\n",
       "      <td>2016-09-18</td>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048566</th>\n",
       "      <td>T1048567</td>\n",
       "      <td>C8337524</td>\n",
       "      <td>1984-05-03</td>\n",
       "      <td>M</td>\n",
       "      <td>75734.42</td>\n",
       "      <td>2016-09-18</td>\n",
       "      <td>1166.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1041765 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        TransactionID CustomerID CustomerDOB CustGender  CustAccountBalance  \\\n",
       "0                  T1   C5841053  1994-10-01          F            17819.05   \n",
       "1                  T2   C2142763  2057-04-04          M             2270.69   \n",
       "2                  T3   C4417068  1996-11-26          F            17874.44   \n",
       "3                  T4   C5342380  1973-09-14          F           866503.21   \n",
       "4                  T5   C9031234  1988-03-24          F             6714.43   \n",
       "...               ...        ...         ...        ...                 ...   \n",
       "1048562      T1048563   C8020229  1990-08-04          M             7635.19   \n",
       "1048563      T1048564   C6459278  1992-02-20          M            27311.42   \n",
       "1048564      T1048565   C6412354  1989-05-18          M           221757.06   \n",
       "1048565      T1048566   C6420483  1978-08-30          M            10117.87   \n",
       "1048566      T1048567   C8337524  1984-05-03          M            75734.42   \n",
       "\n",
       "        TransactionDate  TransactionAmount (INR)  \n",
       "0            2016-02-08                     25.0  \n",
       "1            2016-02-08                  27999.0  \n",
       "2            2016-02-08                    459.0  \n",
       "3            2016-02-08                   2060.0  \n",
       "4            2016-02-08                   1762.5  \n",
       "...                 ...                      ...  \n",
       "1048562      2016-09-18                    799.0  \n",
       "1048563      2016-09-18                    460.0  \n",
       "1048564      2016-09-18                    770.0  \n",
       "1048565      2016-09-18                   1000.0  \n",
       "1048566      2016-09-18                   1166.0  \n",
       "\n",
       "[1041765 rows x 7 columns]"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "bf27009b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2016    1041765\n",
       "Name: TransactionDate, dtype: int64"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['TransactionDate'].dt.year.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "e220f726",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8     427368\n",
       "9     157939\n",
       "10     50743\n",
       "7      48092\n",
       "11     47036\n",
       "4      46963\n",
       "3      46755\n",
       "6      45935\n",
       "2      43510\n",
       "12     42892\n",
       "1      42460\n",
       "5      42072\n",
       "Name: TransactionDate, dtype: int64"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['TransactionDate'].dt.month.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e236bee",
   "metadata": {},
   "source": [
    "All the data are taken in 2016, so we'll use this year to calculate the ages."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d4d18cd",
   "metadata": {},
   "source": [
    "Going through the Date of Birthday we can see that there is something strange: there are dates of birthday referred to 1800, probably cause it is a default value when this data is missing, and a right tail that seems to be a part of the right graph with an offset: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "6c936874",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 99 artists>"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYQAAAD4CAYAAADsKpHdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAWu0lEQVR4nO3df5Bd5X3f8ffHki1jHGF+SIwi0a4yKG6BCdhoFGXcJq1VByXOWHQC7SZN0DTqKMOQFs8kTaW2M62now54OiFlUuhogosgrkFR4kEJwS4j4rrNMODFxgYBCmtDYIOK1kAwdgYcKd/+cZ8Nd5e7u3dXWu0PvV8zd86533Oes+fRSPezz3nOuUpVIUnSu+b7BCRJC4OBIEkCDARJUmMgSJIAA0GS1Cyf7xOYrQsuuKAGBgbm+zQkaVF57LHHvl1Vq3ptW7SBMDAwwNDQ0HyfhiQtKkn+bLJtXjKSJAEGgiSpMRAkSYCBIElqDARJEmAgSJIaA0GSBBgIkqTGQJAkAQaCJM3IwK77Gdh1/3yfxpwwECRJgIEgSWoMBEkS0EcgJPlgkse7Xt9J8skk5yV5MMmzbXluV5vdSYaTHElyVVf9yiRPtG23Jkmrr0hyb6s/kmRgTnorSafQUptPmDYQqupIVV1RVVcAVwJ/CXwe2AUcqqoNwKH2niSXAIPApcBW4LYky9rhbgd2Ahvaa2ur7wBeq6qLgVuAm09J7yRJfZvpJaMtwDer6s+AbcC+Vt8HXN3WtwH3VNVbVfUcMAxsSrIGWFlVD1dVAXdNaDN2rAPAlrHRgyTp9JhpIAwCn2vrF1bVUYC2XN3qa4EXu9qMtNratj6xPq5NVR0HXgfOn/jDk+xMMpRkaHR0dIanLkmaSt+BkOQ9wCeA351u1x61mqI+VZvxhaq9VbWxqjauWtXzf4CTJM3STEYIPwV8tapebu9fbpeBaMtjrT4CXNTVbh3wUquv61Ef1ybJcuAc4NUZnJsk6STNJBB+jrcvFwEcBLa39e3AfV31wXbn0Ho6k8ePtstKbyTZ3OYHrpvQZuxY1wAPtXkGSZp3S+1uosks72enJO8DPgb8clf5JmB/kh3AC8C1AFV1OMl+4CngOHBDVZ1oba4H7gTOAh5oL4A7gLuTDNMZGQyeRJ8kSbPQVyBU1V8yYZK3ql6hc9dRr/33AHt61IeAy3rU36QFiiRpfviksiQJMBAkSY2BIEkCDARJUmMgSNIpsBRuTTUQJEmAgSBJagwESRJgIEiSGgNBkgQYCJKkxkCQJAEGgiSpMRAkSYCBIEk9LYUnj2fKQJAkAQaCJKkxECRJgIEgSWoMBEkS0GcgJPlAkgNJnknydJIfS3JekgeTPNuW53btvzvJcJIjSa7qql+Z5Im27dYkafUVSe5t9UeSDJzynkqSptTvCOG/Al+oqr8DXA48DewCDlXVBuBQe0+SS4BB4FJgK3BbkmXtOLcDO4EN7bW11XcAr1XVxcAtwM0n2S9J0gxNGwhJVgI/DtwBUFXfr6q/ALYB+9pu+4Cr2/o24J6qequqngOGgU1J1gArq+rhqirgrgltxo51ANgyNnqQJJ0e/YwQfggYBf5Hkq8l+e0kZwMXVtVRgLZc3fZfC7zY1X6k1da29Yn1cW2q6jjwOnD+xBNJsjPJUJKh0dHRPrsoSepHP4GwHPgwcHtVfQj4Hu3y0CR6/WZfU9SnajO+ULW3qjZW1cZVq1ZNfdaSpBnpJxBGgJGqeqS9P0AnIF5ul4Foy2Nd+1/U1X4d8FKrr+tRH9cmyXLgHODVmXZGkjR70wZCVf0/4MUkH2ylLcBTwEFge6ttB+5r6weBwXbn0Ho6k8ePtstKbyTZ3OYHrpvQZuxY1wAPtXkGSdJpsrzP/f4l8Nkk7wG+BfxzOmGyP8kO4AXgWoCqOpxkP53QOA7cUFUn2nGuB+4EzgIeaC/oTFjfnWSYzshg8CT7JUkzNvZlds/f9PF5PpP50VcgVNXjwMYem7ZMsv8eYE+P+hBwWY/6m7RAkSTND59UliQBBoIkqTEQJEmAgSBJagwESRJgIEiSGgNBkgQYCJKkxkCQJAEGgiSpMRAkSYCBIElqDARJEmAgSNIpN7Dr/r/5Ku3FxECQdEZbrB/ec8FAkCQBBoIkqTEQJEmAgSBJavoKhCTPJ3kiyeNJhlrtvCQPJnm2Lc/t2n93kuEkR5Jc1VW/sh1nOMmtSdLqK5Lc2+qPJBk4xf2UJE1jJiOEf1hVV1TVxvZ+F3CoqjYAh9p7klwCDAKXAluB25Isa21uB3YCG9pra6vvAF6rqouBW4CbZ98lSdJsnMwlo23Avra+D7i6q35PVb1VVc8Bw8CmJGuAlVX1cFUVcNeENmPHOgBsGRs9SJJOj34DoYD/leSxJDtb7cKqOgrQlqtbfS3wYlfbkVZb29Yn1se1qarjwOvA+RNPIsnOJENJhkZHR/s8dUlSP5b3ud9HquqlJKuBB5M8M8W+vX6zrynqU7UZX6jaC+wF2Lhx4zu2S5Jmr68RQlW91JbHgM8Dm4CX22Ug2vJY230EuKir+TrgpVZf16M+rk2S5cA5wKsz744kabamDYQkZyf5gbF14CeBJ4GDwPa223bgvrZ+EBhsdw6tpzN5/Gi7rPRGks1tfuC6CW3GjnUN8FCbZ5AknSb9XDK6EPh8m+NdDvzPqvpCkq8A+5PsAF4ArgWoqsNJ9gNPAceBG6rqRDvW9cCdwFnAA+0FcAdwd5JhOiODwVPQN0nSDEwbCFX1LeDyHvVXgC2TtNkD7OlRHwIu61F/kxYokqT54ZPKkiTAQJAkNQaCJAkwECRJjYEgSQL6f1JZkpaE7v8u8/mbPj6PZ7LwOEKQJAEGgiSpMRAkSYCBIElqDARJEmAgSJIaA0GSBBgIkqTGQJAkAQaCJKkxECRJgIEgSWoMBEkSYCBIkpq+v/46yTJgCPjzqvqZJOcB9wIDwPPAP6mq19q+u4EdwAngX1XVF1v9SuBO4Czgj4Abq6qSrADuAq4EXgH+aVU9fwr6J0njvvJak5vJCOFG4Omu97uAQ1W1ATjU3pPkEmAQuBTYCtzWwgTgdmAnsKG9trb6DuC1qroYuAW4eVa9kSTNWl+BkGQd8HHgt7vK24B9bX0fcHVX/Z6qequqngOGgU1J1gArq+rhqio6I4KrexzrALAlSWbVI0nSrPQ7QvhN4NeBv+6qXVhVRwHacnWrrwVe7NpvpNXWtvWJ9XFtquo48Dpw/sSTSLIzyVCSodHR0T5PXZLUj2kDIcnPAMeq6rE+j9nrN/uaoj5Vm/GFqr1VtbGqNq5atarP05Ek9aOfSeWPAJ9I8tPAe4GVSX4HeDnJmqo62i4HHWv7jwAXdbVfB7zU6ut61LvbjCRZDpwDvDrLPkmSZmHaEUJV7a6qdVU1QGey+KGq+gXgILC97bYduK+tHwQGk6xIsp7O5PGj7bLSG0k2t/mB6ya0GTvWNe1nvGOEIEmaO33fdtrDTcD+JDuAF4BrAarqcJL9wFPAceCGqjrR2lzP27edPtBeAHcAdycZpjMyGDyJ85IkzcKMAqGqvgR8qa2/AmyZZL89wJ4e9SHgsh71N2mBIkmaHz6pLEkCDARJUmMgSJIAA0GS1BgIkiTAQJCkOTWw6/5F822rJ/McgiQtWIvlQ3ghcYQgSQIMBElSYyBIkgADQZLUGAiSJMBAkCQ1BoIkCTAQJEmND6ZJWjJ8GO3kOEKQJAEGgiSpMRAkSUAfgZDkvUkeTfL1JIeTfKrVz0vyYJJn2/Lcrja7kwwnOZLkqq76lUmeaNtuTZJWX5Hk3lZ/JMnAHPRVkjSFfkYIbwEfrarLgSuArUk2A7uAQ1W1ATjU3pPkEmAQuBTYCtyWZFk71u3ATmBDe21t9R3Aa1V1MXALcPPJd02SNBPTBkJ1fLe9fXd7FbAN2Nfq+4Cr2/o24J6qequqngOGgU1J1gArq+rhqirgrgltxo51ANgyNnqQJJ0efc0hJFmW5HHgGPBgVT0CXFhVRwHacnXbfS3wYlfzkVZb29Yn1se1qarjwOvA+T3OY2eSoSRDo6OjfXVQktSfvgKhqk5U1RXAOjq/7V82xe69frOvKepTtZl4HnuramNVbVy1atU0Zy1JmokZ3WVUVX8BfInOtf+X22Ug2vJY220EuKir2TrgpVZf16M+rk2S5cA5wKszOTdJ0snp5y6jVUk+0NbPAv4R8AxwENjedtsO3NfWDwKD7c6h9XQmjx9tl5XeSLK5zQ9cN6HN2LGuAR5q8wySpNOkn6+uWAPsa3cKvQvYX1V/mORhYH+SHcALwLUAVXU4yX7gKeA4cENVnWjHuh64EzgLeKC9AO4A7k4yTGdkMHgqOidJ6t+0gVBV3wA+1KP+CrBlkjZ7gD096kPAO+YfqupNWqBIkuaHTypLkgADQZLU+PXXkhY1v/L61HGEIEkCDARJUmMgSJIAA0GS1BgIkiTAu4wkLULeWTQ3HCFIkgADQZLUGAiSJMBAkCQ1BoIkCTAQJEmNgSBJAgwESVLjg2mSFgUfRpt7jhAkSYCBIElqpg2EJBcl+eMkTyc5nOTGVj8vyYNJnm3Lc7va7E4ynORIkqu66lcmeaJtuzVJWn1Fkntb/ZEkA3PQV0nSFPoZIRwHfrWq/i6wGbghySXALuBQVW0ADrX3tG2DwKXAVuC2JMvasW4HdgIb2mtrq+8AXquqi4FbgJtPQd8kaUEZ2HX/gp4LmTYQqupoVX21rb8BPA2sBbYB+9pu+4Cr2/o24J6qequqngOGgU1J1gArq+rhqirgrgltxo51ANgyNnqQJJ0eM5pDaJdyPgQ8AlxYVUehExrA6rbbWuDFrmYjrba2rU+sj2tTVceB14Hze/z8nUmGkgyNjo7O5NQlSdPo+7bTJO8Hfg/4ZFV9Z4pf4HttqCnqU7UZX6jaC+wF2Lhx4zu2S1paFvLllaWorxFCknfTCYPPVtXvt/LL7TIQbXms1UeAi7qarwNeavV1Perj2iRZDpwDvDrTzkiSZq+fu4wC3AE8XVW/0bXpILC9rW8H7uuqD7Y7h9bTmTx+tF1WeiPJ5nbM6ya0GTvWNcBDbZ5BknSa9HPJ6CPALwJPJHm81f4tcBOwP8kO4AXgWoCqOpxkP/AUnTuUbqiqE63d9cCdwFnAA+0FncC5O8kwnZHB4Ml1S5I0U9MGQlX9X3pf4wfYMkmbPcCeHvUh4LIe9TdpgSJJmh8+qSxJAgwESVJjIEiSAL/+WtIC47MH88cRgiQJMBAkSY2BIEkCDARJUmMgSJp3C/3/CThTGAiSJMBAkCQ1BoIkCTAQJEmNgSBJAgwESVJjIEjSPFiIt9oaCJLmxUL8QDzTGQiSJMBAkCQ10wZCks8kOZbkya7aeUkeTPJsW57btW13kuEkR5Jc1VW/MskTbdutSdLqK5Lc2+qPJBk4xX2UJPWhnxHCncDWCbVdwKGq2gAcau9JcgkwCFza2tyWZFlrczuwE9jQXmPH3AG8VlUXA7cAN8+2M5IWNucNFrZpA6Gqvgy8OqG8DdjX1vcBV3fV76mqt6rqOWAY2JRkDbCyqh6uqgLumtBm7FgHgC1jowdJ0ukz2zmEC6vqKEBbrm71tcCLXfuNtNratj6xPq5NVR0HXgfO7/VDk+xMMpRkaHR0dJanLul0clSweJzqSeVev9nXFPWp2ryzWLW3qjZW1cZVq1bN8hQlSb3MNhBebpeBaMtjrT4CXNS13zrgpVZf16M+rk2S5cA5vPMSlSRpjs02EA4C29v6duC+rvpgu3NoPZ3J40fbZaU3kmxu8wPXTWgzdqxrgIfaPIOkRcrLRIvT8ul2SPI54B8AFyQZAf4DcBOwP8kO4AXgWoCqOpxkP/AUcBy4oapOtENdT+eOpbOAB9oL4A7g7iTDdEYGg6ekZ5KkGZk2EKrq5ybZtGWS/fcAe3rUh4DLetTfpAWKJGn++KSyJAkwECRJzbSXjCRpMmMTx8/f9PFx65qZ7gn4+fzzc4QgSQIMBElSYyBIkgADQVIfuh8086GzpctAkCQBBoIkqTEQJEmAgSBpEs4VnHkMBEl/wxA4s/mksnQGWyhPyGphMBCkM4wjAE3GQJCWKD/4NVPOIUiSAEcI0qLnPIBOFQNBWoQmuxzkZaLFbz4D3kCQ5slk/5dAr3XpdHAOQZpjfjGcFosFEwhJtiY5kmQ4ya75Ph9ppvzg12K3IC4ZJVkG/DfgY8AI8JUkB6vqqfk9M53JZnJJx8lczYXTPZ+wIAIB2AQMV9W3AJLcA2wD5iQQvCtjcTqdv3H790ILzen43EpVzcmBZ3QSyTXA1qr6F+39LwI/WlW/MmG/ncDO9vaDwJEZ/qgLgG+f5OkuNvb5zGCfzwynos9/u6pW9dqwUEYI6VF7R1JV1V5g76x/SDJUVRtn234xss9nBvt8ZpjrPi+USeUR4KKu9+uAl+bpXCTpjLRQAuErwIYk65O8BxgEDs7zOUnSGWVBXDKqquNJfgX4IrAM+ExVHZ6DHzXry02LmH0+M9jnM8Oc9nlBTCpLkubfQrlkJEmaZwaCJAlYAoGQ5DNJjiV5sqt2eZKHkzyR5A+SrOzatrt9PcaRJFd11a9s+w8nuTVJr1thF4SZ9DnJx5I81uqPJfloV5sl2eeu7X8ryXeT/FpXbcn2OcmPtG2H2/b3tvqS7HOSdyfZ1+pPJ9nd1WZR9DnJRUn+uJ3/4SQ3tvp5SR5M8mxbntvVZu4+w6pqUb+AHwc+DDzZVfsK8BNt/ZeA/9TWLwG+DqwA1gPfBJa1bY8CP0bnmYgHgJ+a776doj5/CPjBtn4Z8OddbZZkn7u2/x7wu8CvLfU+07lB5BvA5e39+WfA3+2fB+5p6+8DngcGFlOfgTXAh9v6DwB/2j6nPg3savVdwM1tfU4/wxb9CKGqvgy8OqH8QeDLbf1B4Gfb+jY6f4HeqqrngGFgU5I1wMqqerg6f7J3AVfP+cnP0kz6XFVfq6qxZzoOA+9NsmIp9xkgydXAt+j0eay2lPv8k8A3qurrre0rVXViife5gLOTLAfOAr4PfGcx9bmqjlbVV9v6G8DTwFo6n1X72m77ePv85/QzbNEHwiSeBD7R1q/l7Yfe1gIvdu030mpr2/rE+mIyWZ+7/Szwtap6iyXc5yRnA/8G+NSE/Zdsn4EfBirJF5N8Ncmvt/pS7vMB4HvAUeAF4L9U1ass0j4nGaAzon8EuLCqjkInNIDVbbc5/QxbqoHwS8ANSR6jMwz7fqtP9hUZfX11xgI3WZ8BSHIpcDPwy2OlHsdYKn3+FHBLVX13wv5Luc/Lgb8H/LO2/MdJtrC0+7wJOAH8IJ3LJ7+a5IdYhH1O8n46lzg/WVXfmWrXHrVT9hm2IB5MO9Wq6hk6Q2iS/DAw9tWAk31Fxkhbn1hfNKboM0nWAZ8Hrquqb7byUu7zjwLXJPk08AHgr5O8Secf3FLt8wjwv6vq223bH9G5Fv87LN0+/zzwhar6K+BYkj8BNgL/h0XU5yTvpvN387NV9fut/HKSNVV1tF0OOtbqc/oZtiRHCElWt+W7gH8P/Pe26SAw2K6hrwc2AI+2IdkbSTa3mfnrgPvm4dRnbbI+J/kAcD+wu6r+ZGz/pdznqvr7VTVQVQPAbwL/uap+ayn3mc5T/j+S5H3tmvpPAE8t8T6/AHw0HWcDm4FnFlOf2/ndATxdVb/RtekgsL2tb+ft85/bz7D5nmU/2RfwOTrXEP+KTkruAG6kM1v/p8BNtCey2/7/js7M/BG6ZuHp/GbxZNv2W91tFtprJn2m8w/oe8DjXa/VS7nPE9r9R8bfZbRk+wz8Ap1J9CeBTy/1PgPvp3MX2WE6/3fKv15sfaZzea/o3CE29u/zp+ncJXYIeLYtz+tqM2efYX51hSQJWKKXjCRJM2cgSJIAA0GS1BgIkiTAQJAkNQaCJAkwECRJzf8HfjSCUNEyqbEAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count = Counter(df['CustomerDOB'].dt.year)\n",
    "\n",
    "plt.bar(count.keys(), count.values(), label = 'year')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7450cbe7",
   "metadata": {},
   "source": [
    "We decide to drop data related to years 1800 and rearrange the data after year 2000: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "2738d85b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 99 artists>"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.loc[df.CustomerDOB.dt.year > 2000, 'CustomerDOB'] = df.loc[df.CustomerDOB.dt.year > 2000, 'CustomerDOB'] - pd.DateOffset(years = 100)\n",
    "\n",
    "df.drop(df[df.CustomerDOB.dt.year == 1800].index, axis=0, inplace=True)\n",
    "\n",
    "count = Counter(df['CustomerDOB'].dt.year)\n",
    "\n",
    "plt.bar(count.keys(), count.values(), label = 'year')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f190d333",
   "metadata": {},
   "source": [
    "Now we can create a 'CustomerAge' column: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "185ca199",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CustomerAge'] = (df['TransactionDate'].dt.year - df['CustomerDOB'].dt.year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "88b31893",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CustomerAge'] = df['CustomerAge'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "213808df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 985473 entries, 0 to 1048566\n",
      "Data columns (total 8 columns):\n",
      " #   Column                   Non-Null Count   Dtype         \n",
      "---  ------                   --------------   -----         \n",
      " 0   TransactionID            985473 non-null  object        \n",
      " 1   CustomerID               985473 non-null  object        \n",
      " 2   CustomerDOB              985473 non-null  datetime64[ns]\n",
      " 3   CustGender               985473 non-null  object        \n",
      " 4   CustAccountBalance       985473 non-null  float64       \n",
      " 5   TransactionDate          985473 non-null  datetime64[ns]\n",
      " 6   TransactionAmount (INR)  985473 non-null  float64       \n",
      " 7   CustomerAge              985473 non-null  int64         \n",
      "dtypes: datetime64[ns](2), float64(2), int64(1), object(3)\n",
      "memory usage: 67.7+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info() #to be sure astype worked properly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "01a9530f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 99 artists>"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count = Counter(df['CustomerAge'])\n",
    "\n",
    "plt.bar(count.keys(), count.values(), label = 'year')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b32f38ea",
   "metadata": {},
   "source": [
    "Exploring the ages at the edges we can see that: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "6609f942",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['CustomerAge'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "ead74ec1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "115"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['CustomerAge'].max()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "850d1caa",
   "metadata": {},
   "source": [
    "Considering that the oldest person ever in India was Lucy d'Abreu who lived 113 years and 197 days (ref: Wikipedia) it seems a good choice to drop all the ages over 100 years."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "a2b465bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(df[df.CustomerAge > 100].index, axis=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "d6faa6d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 84 artists>"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "count = Counter(df['CustomerAge'])\n",
    "\n",
    "plt.bar(count.keys(), count.values(), label = 'year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "a5e4d959",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    984853.000000\n",
       "mean         31.043111\n",
       "std           8.745039\n",
       "min          16.000000\n",
       "25%          25.000000\n",
       "50%          29.000000\n",
       "75%          34.000000\n",
       "max         100.000000\n",
       "Name: CustomerAge, dtype: float64"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['CustomerAge'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b53922e0",
   "metadata": {},
   "source": [
    "Everythings looks fine now, so we can drop the columns referred to the TransactionDate and CustomerDOB.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "fe398cc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "del df['CustomerDOB'], df['TransactionDate'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "1098de24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TransactionID</th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>CustGender</th>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "      <th>CustomerAge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T1</td>\n",
       "      <td>C5841053</td>\n",
       "      <td>F</td>\n",
       "      <td>17819.05</td>\n",
       "      <td>25.0</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>T2</td>\n",
       "      <td>C2142763</td>\n",
       "      <td>M</td>\n",
       "      <td>2270.69</td>\n",
       "      <td>27999.0</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>T3</td>\n",
       "      <td>C4417068</td>\n",
       "      <td>F</td>\n",
       "      <td>17874.44</td>\n",
       "      <td>459.0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T4</td>\n",
       "      <td>C5342380</td>\n",
       "      <td>F</td>\n",
       "      <td>866503.21</td>\n",
       "      <td>2060.0</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>T5</td>\n",
       "      <td>C9031234</td>\n",
       "      <td>F</td>\n",
       "      <td>6714.43</td>\n",
       "      <td>1762.5</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048562</th>\n",
       "      <td>T1048563</td>\n",
       "      <td>C8020229</td>\n",
       "      <td>M</td>\n",
       "      <td>7635.19</td>\n",
       "      <td>799.0</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048563</th>\n",
       "      <td>T1048564</td>\n",
       "      <td>C6459278</td>\n",
       "      <td>M</td>\n",
       "      <td>27311.42</td>\n",
       "      <td>460.0</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048564</th>\n",
       "      <td>T1048565</td>\n",
       "      <td>C6412354</td>\n",
       "      <td>M</td>\n",
       "      <td>221757.06</td>\n",
       "      <td>770.0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048565</th>\n",
       "      <td>T1048566</td>\n",
       "      <td>C6420483</td>\n",
       "      <td>M</td>\n",
       "      <td>10117.87</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048566</th>\n",
       "      <td>T1048567</td>\n",
       "      <td>C8337524</td>\n",
       "      <td>M</td>\n",
       "      <td>75734.42</td>\n",
       "      <td>1166.0</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>984853 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        TransactionID CustomerID CustGender  CustAccountBalance  \\\n",
       "0                  T1   C5841053          F            17819.05   \n",
       "1                  T2   C2142763          M             2270.69   \n",
       "2                  T3   C4417068          F            17874.44   \n",
       "3                  T4   C5342380          F           866503.21   \n",
       "4                  T5   C9031234          F             6714.43   \n",
       "...               ...        ...        ...                 ...   \n",
       "1048562      T1048563   C8020229          M             7635.19   \n",
       "1048563      T1048564   C6459278          M            27311.42   \n",
       "1048564      T1048565   C6412354          M           221757.06   \n",
       "1048565      T1048566   C6420483          M            10117.87   \n",
       "1048566      T1048567   C8337524          M            75734.42   \n",
       "\n",
       "         TransactionAmount (INR)  CustomerAge  \n",
       "0                           25.0           22  \n",
       "1                        27999.0           59  \n",
       "2                          459.0           20  \n",
       "3                         2060.0           43  \n",
       "4                         1762.5           28  \n",
       "...                          ...          ...  \n",
       "1048562                    799.0           26  \n",
       "1048563                    460.0           24  \n",
       "1048564                    770.0           27  \n",
       "1048565                   1000.0           38  \n",
       "1048566                   1166.0           32  \n",
       "\n",
       "[984853 rows x 6 columns]"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "8e3db1df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CustAccountBalance</th>\n",
       "      <td>984853.0</td>\n",
       "      <td>106096.645961</td>\n",
       "      <td>818094.961922</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4584.03</td>\n",
       "      <td>16010.04</td>\n",
       "      <td>53772.49</td>\n",
       "      <td>1.150355e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TransactionAmount (INR)</th>\n",
       "      <td>984853.0</td>\n",
       "      <td>1452.050432</td>\n",
       "      <td>6140.266234</td>\n",
       "      <td>0.0</td>\n",
       "      <td>151.00</td>\n",
       "      <td>431.00</td>\n",
       "      <td>1125.00</td>\n",
       "      <td>1.560035e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CustomerAge</th>\n",
       "      <td>984853.0</td>\n",
       "      <td>31.043111</td>\n",
       "      <td>8.745039</td>\n",
       "      <td>16.0</td>\n",
       "      <td>25.00</td>\n",
       "      <td>29.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>1.000000e+02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            count           mean            std   min  \\\n",
       "CustAccountBalance       984853.0  106096.645961  818094.961922   0.0   \n",
       "TransactionAmount (INR)  984853.0    1452.050432    6140.266234   0.0   \n",
       "CustomerAge              984853.0      31.043111       8.745039  16.0   \n",
       "\n",
       "                             25%       50%       75%           max  \n",
       "CustAccountBalance       4584.03  16010.04  53772.49  1.150355e+08  \n",
       "TransactionAmount (INR)   151.00    431.00   1125.00  1.560035e+06  \n",
       "CustomerAge                25.00     29.00     34.00  1.000000e+02  "
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98637e1e",
   "metadata": {},
   "source": [
    "We cast transaction amount and account balance to int: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "2f35bddc",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['TransactionAmount (INR)'] = df['TransactionAmount (INR)'].astype(int)\n",
    "\n",
    "df['CustAccountBalance'] = df['CustAccountBalance'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ef352b9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1041765 entries, 0 to 1048566\n",
      "Data columns (total 6 columns):\n",
      " #   Column                   Non-Null Count    Dtype         \n",
      "---  ------                   --------------    -----         \n",
      " 0   TransactionID            1041765 non-null  object        \n",
      " 1   CustomerID               1041765 non-null  object        \n",
      " 2   CustomerDOB              1041765 non-null  datetime64[ns]\n",
      " 3   CustGender               1041765 non-null  object        \n",
      " 4   CustAccountBalance       1041765 non-null  int64         \n",
      " 5   TransactionAmount (INR)  1041765 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(2), object(3)\n",
      "memory usage: 55.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92a1a980",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "288c93d4",
   "metadata": {},
   "source": [
    "## 1.2 Fingerprint hashing\n",
    "Using the previously selected data with the features you found pertinent, you have to:\n",
    "\n",
    "1. Implement your minhash function from scratch. No ready-made hash functions are allowed. Read the class material and search the internet if you need to. For reference, it may be practical to look at the description of hash functions in the book.\n",
    "\n",
    "2. Process the dataset and add each record to the MinHash. The subtask's goal is to try and map each consumer to its bin; to ensure this works well, be sure you understand how MinHash works and choose a matching threshold to use. Before moving on, experiment with different thresholds, explaining your choice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "312cc8f4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "357c769c",
   "metadata": {},
   "source": [
    "## 1.3 Locality Sensitive Hashing\n",
    "Now that you prepared your algorithm, it's query time!\n",
    "We have prepared some dummy users for you to work with.\n",
    "\n",
    "Download this csv and report the most similar users (comparing them against the dataset provided in Kaggle).\n",
    "Did your hashing method work properly, what scores have you obtained and how long did it take to run? Provide information and analysis about the results."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
